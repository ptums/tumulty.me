'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var imageUrlBuilder = require('@sanity/image-url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var imageUrlBuilder__default = /*#__PURE__*/_interopDefaultLegacy(imageUrlBuilder);

const DEFAULT_FALLBACK_IMAGE_WIDTH = 1920;
const DEFAULT_IMAGE_BUILDER = (imageUrlBuilder, options) => {
    return imageUrlBuilder
        .width(options.width ||
        Math.min(options.originalImageDimensions.width, DEFAULT_FALLBACK_IMAGE_WIDTH))
        .fit('clip');
};
function getSanityRefId(image) {
    if (typeof image === 'string') {
        return image;
    }
    const obj = image;
    const ref = image;
    const img = image;
    if (typeof image === 'string') {
        return image;
    }
    if (obj.asset) {
        return obj.asset._ref || obj.asset._id;
    }
    return ref._ref || img._id || '';
}
function getImageDimensions(image) {
    const id = getSanityRefId(image);
    const dimensions = id.split('-')[2];
    const [width, height] = dimensions.split('x').map((num) => parseInt(num, 10));
    const aspectRatio = width / height;
    return { width, height, aspectRatio };
}
function useNextSanityImage(sanityClient, image, options = {}) {
    const imageBuilder = options.imageBuilder || DEFAULT_IMAGE_BUILDER;
    return react.useMemo(() => {
        const originalImageDimensions = getImageDimensions(image);
        const loader = ({ width }) => {
            return (imageBuilder(imageUrlBuilder__default['default'](sanityClient).image(image), {
                width,
                originalImageDimensions
            }).url() || '');
        };
        const baseImgBuilder = imageBuilder(imageUrlBuilder__default['default'](sanityClient).image(image), {
            width: null,
            originalImageDimensions
        });
        const width = baseImgBuilder.options.width ||
            (baseImgBuilder.options.maxWidth
                ? Math.min(baseImgBuilder.options.maxWidth, originalImageDimensions.width)
                : originalImageDimensions.width);
        const height = baseImgBuilder.options.height ||
            (baseImgBuilder.options.maxHeight
                ? Math.min(baseImgBuilder.options.maxHeight, originalImageDimensions.height)
                : Math.round(width / originalImageDimensions.aspectRatio));
        return {
            loader,
            src: baseImgBuilder.url() || '',
            width,
            height,
            layout: 'responsive'
        };
    }, [imageBuilder, image, sanityClient]);
}

exports.useNextSanityImage = useNextSanityImage;
